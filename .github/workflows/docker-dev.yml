name: Build Docker with Matrix Strategy
run-name: "Image for ${{ github.event.repository.name }}: ${{ github.run_number }} - ${{ github.actor }}"
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
    - main
    paths-ignore:
    - '.github/**'
    - 'docs/**'
    - 'CODE-OF-CONDUCT.md'
    - 'CONTRIBUTING.md'
    - 'LICENSE'
    - 'README.md'
    - 'SECURITY.md'
  workflow_dispatch:
    inputs:
      tags:
        required: false
        type: string
        default: ''
        description: 'Tags'
      dry-run:
        required: true
        type: boolean
        default: false
        description: 'Dry run'
permissions: {}

jobs:
  prepare:
    permissions:
      contents: read
    name: "Prepare Images and Metadata"
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.load_component.outputs.components }}
      platforms: ${{ steps.load_component.outputs.platforms }}
      metadata: "${{ steps.metadata.outputs.result }}"
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Load Docker Configuration
      id: load_component
      shell: bash
      run: |
        verify=$(cat "$GITHUB_WORKSPACE/.github/docker-dev-config.json" | jq '
          def verify_structure:
            .components as $components
            | .platforms as $platforms
            | ($components | type == "array")
            and (all($components[]; has("name") and has("file") and has("context")))
            and ($platforms | type == "string");
          verify_structure
          | if . then true else false end
        ')
        if [ "${verify}" == "true" ]; then
          echo "✅ $GITHUB_WORKSPACE/.github/docker-dev-config.json file is valid"
          components=$(jq -c ".components" "$GITHUB_WORKSPACE/.github/docker-dev-config.json")
          platforms=$(jq -c ".platforms" "$GITHUB_WORKSPACE/.github/docker-dev-config.json")
        else
          echo "❗ $GITHUB_WORKSPACE/.github/docker-dev-config.json file is invalid"
          echo "❗ $GITHUB_WORKSPACE/.github/docker-dev-config.json file is invalid" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        echo "components=${components}" >> "$GITHUB_OUTPUT"
        echo "platforms=${platforms}" >> "$GITHUB_OUTPUT"

    - name: Create tags for images
      uses: netcracker/qubership-workflow-hub/actions/metadata-action@main
      id: metadata
      with:
        short-sha: 11
        extra-tags: ${{ github.event.inputs.tags }}
        default-template: "{{ref-name}}-{{timestamp}}, {{ref-name}}-{{short-sha}}, {{ref-name}}, {{short-sha}}"
        default-tag: "dev"
        dry-run: ${{ inputs.dry-run }}

  build:
    name: Build Docker Images
    needs: [prepare]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.prepare.outputs.components) }}
    steps:
    - name: Docker
      id: docker
      uses: netcracker/qubership-workflow-hub/actions/docker-action@main
      with:
        ref: ${{ github.ref }}
        dry-run: ${{ inputs.dry-run }}
        download-artifact: false
        component: ${{ toJson(matrix.component) }}
        platforms: ${{ needs.prepare.outputs.platforms }}
        tags: ${{ needs.prepare.outputs.metadata }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Analyze for critical and high CVEs
      id: docker-scout-cves
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: docker/scout-action@v1
      with:
        command: cves,recommendations
        image: ${{ toJson(needs.prepare.outputs.metadata)[0] }}
        sarif-file: sarif.output.json
        summary: true
        ignore-base: false
        dockerhub-user: ${{ secrets.DOCKER_IO_USER }}
        dockerhub-password: ${{ secrets.DOCKER_IO_PASSWORD }}

    - name: Upload SARIF result
      id: upload-sarif
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: sarif.output.json